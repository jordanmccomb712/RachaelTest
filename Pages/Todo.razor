@page "/todo"
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory


<h3>Todo (@todoItems.Count(todo => !todo.IsComplete))</h3>

<input placeholder="Something todo" @bind="newTodo"/>
<button @onclick ="AddTodo"> Add todo </button>


<ol>
    @foreach (var todo in todoItems)
    {
        <li>

            <input type="checkbox" @bind="todo.IsComplete"/>
            <input @bind="todo.Name"/>

        </li>
    }
</ol>



@code {

    private const string webApiUri = "http://localhost:5269/api/TodoItems";
    private IEnumerable<TodoItem> todoItems = Array.Empty<TodoItem>();
    
    private bool getTodoItemError;
    private bool shouldRender;
    private string? newTodo;

    protected override bool ShouldRender() => shouldRender;
    private void AddTodo()
    {
        if(!string.IsNullOrWhiteSpace(newTodo))
        {
            OnPostAsync(new TodoItem { Id = 0, Name = newTodo, IsComplete = false});
            newTodo = string.Empty;
        }
    }

    //method to get all todos from api
    
    protected override async  Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, webApiUri);
        request.Headers.Add("Accept", "application/json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            
            todoItems = await JsonSerializer.DeserializeAsync<IEnumerable<TodoItem>>(responseStream);
        }
        else
        {
            getTodoItemError = true;
        }

        shouldRender = true;

        //todo, make this a return of a todoItems list, then add that to the post
        
    }

    private async Task OnPostAsync(TodoItem newTodoItem)
    {
        var request = new HttpRequestMessage(HttpMethod.Post, webApiUri);
        request.Headers.Add("Accept", "application/json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");
        var jsonTodo = JsonSerializer.Serialize(newTodoItem);
        var content = new StringContent(jsonTodo, Encoding.UTF8, "application/json");
        request.Content = content;

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        Console.WriteLine(jsonTodo);
        Console.WriteLine("Reaches here 3");
        await OnInitializedAsync();

        

        if (response.IsSuccessStatusCode)
        {

            using var responseStream = await response.Content.ReadAsStreamAsync();
            todoItems = await JsonSerializer.DeserializeAsync<IEnumerable<TodoItem>>(responseStream);
            Console.WriteLine("Reaches here");
            
        }
        else
        {
            getTodoItemError = true;
            Console.WriteLine("Reaches here 2");
        }
        
        
        shouldRender = true;
        

    }

   
}
